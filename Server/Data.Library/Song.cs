//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MegaStar.Data.Library.Entities
{
    public partial class Song
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            protected set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            protected set;
        }
    
        public virtual int ArtistId
        {
            get { return _artistId; }
            protected set
            {
                if (_artistId != value)
                {
                    if (Artist != null && Artist.Id != value)
                    {
                        Artist = null;
                    }
                    _artistId = value;
                }
            }
        }
        private int _artistId;

        #endregion
        #region Navigation Properties
    
        public virtual Artist Artist
        {
            get { return _artist; }
            set
            {
                if (!ReferenceEquals(_artist, value))
                {
                    var previousValue = _artist;
                    _artist = value;
                    FixupArtist(previousValue);
                }
            }
        }
        private Artist _artist;
    
        public virtual ICollection<SongStarLink> SongStarLinks
        {
            get
            {
                if (_songStarLinks == null)
                {
                    var newCollection = new FixupCollection<SongStarLink>();
                    newCollection.CollectionChanged += FixupSongStarLinks;
                    _songStarLinks = newCollection;
                }
                return _songStarLinks;
            }
            set
            {
                if (!ReferenceEquals(_songStarLinks, value))
                {
                    var previousValue = _songStarLinks as FixupCollection<SongStarLink>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSongStarLinks;
                    }
                    _songStarLinks = value;
                    var newValue = value as FixupCollection<SongStarLink>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSongStarLinks;
                    }
                }
            }
        }
        private ICollection<SongStarLink> _songStarLinks;

        #endregion
        #region Association Fixup
    
        private void FixupArtist(Artist previousValue)
        {
            if (previousValue != null && previousValue.Songs.Contains(this))
            {
                previousValue.Songs.Remove(this);
            }
    
            if (Artist != null)
            {
                if (!Artist.Songs.Contains(this))
                {
                    Artist.Songs.Add(this);
                }
                if (ArtistId != Artist.Id)
                {
                    ArtistId = Artist.Id;
                }
            }
        }
    
        private void FixupSongStarLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SongStarLink item in e.NewItems)
                {
                    item.Song = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SongStarLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Song, this))
                    {
                        item.Song = null;
                    }
                }
            }
        }

        #endregion
    }
}
